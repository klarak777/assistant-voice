"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@11labs+client@0.0.4";
exports.ids = ["vendor-chunks/@11labs+client@0.0.4"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@11labs+client@0.0.4/node_modules/@11labs/client/dist/lib.modern.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@11labs+client@0.0.4/node_modules/@11labs/client/dist/lib.modern.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Conversation: () => (/* binding */ p)\n/* harmony export */ });\nfunction t(){return t=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var s in n)({}).hasOwnProperty.call(n,s)&&(t[s]=n[s])}return t},t.apply(null,arguments)}function e(t){const e=new Uint8Array(t);return window.btoa(String.fromCharCode(...e))}function n(t){const e=window.atob(t),n=e.length,s=new Uint8Array(n);for(let t=0;t<n;t++)s[t]=e.charCodeAt(t);return s.buffer}const s=new Blob(['\\n      const TARGET_SAMPLE_RATE = 16000;\\n      class RawAudioProcessor extends AudioWorkletProcessor {\\n        constructor() {\\n          super();\\n          this.buffer = []; // Initialize an empty buffer\\n          this.bufferSize = TARGET_SAMPLE_RATE / 4; // Define the threshold for buffer size to be ~0.25s\\n\\n          if (globalThis.LibSampleRate && sampleRate !== TARGET_SAMPLE_RATE) {\\n            globalThis.LibSampleRate.create(1, sampleRate, TARGET_SAMPLE_RATE).then(resampler => {\\n              this.resampler = resampler;\\n            });\\n          }\\n        }\\n        process(inputs, outputs) {\\n          const input = inputs[0]; // Get the first input node\\n          if (input.length > 0) {\\n            let channelData = input[0]; // Get the first channel\\'s data\\n\\n            // Resample the audio if necessary\\n            if (this.resampler) {\\n              channelData = this.resampler.full(channelData);\\n            }\\n\\n            // Add channel data to the buffer\\n            this.buffer.push(...channelData);\\n            // Get max volume \\n            let sum = 0.0;\\n            for (let i = 0; i < channelData.length; i++) {\\n              sum += channelData[i] * channelData[i];\\n            }\\n            const maxVolume = Math.sqrt(sum / channelData.length);\\n            // Check if buffer size has reached or exceeded the threshold\\n            if (this.buffer.length >= this.bufferSize) {\\n              const float32Array = new Float32Array(this.buffer)\\n              let pcm16Array = new Int16Array(float32Array.length);\\n\\n              // Iterate through the Float32Array and convert each sample to PCM16\\n              for (let i = 0; i < float32Array.length; i++) {\\n                // Clamp the value to the range [-1, 1]\\n                let sample = Math.max(-1, Math.min(1, float32Array[i]));\\n            \\n                // Scale the sample to the range [-32768, 32767] and store it in the Int16Array\\n                pcm16Array[i] = sample < 0 ? sample * 32768 : sample * 32767;\\n              }\\n            \\n              // Send the buffered data to the main script\\n              this.port.postMessage([pcm16Array, maxVolume]);\\n            \\n              // Clear the buffer after sending\\n              this.buffer = [];\\n            }\\n          }\\n          return true; // Continue processing\\n        }\\n      }\\n      registerProcessor(\"raw-audio-processor\", RawAudioProcessor);\\n  '],{type:\"application/javascript\"}),o=URL.createObjectURL(s);class a{static async create(t){let e=null,n=null;try{const s=navigator.mediaDevices.getSupportedConstraints().sampleRate;e=new window.AudioContext(s?{sampleRate:t}:{});const i=e.createAnalyser();s||await e.audioWorklet.addModule(\"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\"),await e.audioWorklet.addModule(o),n=await navigator.mediaDevices.getUserMedia({audio:{sampleRate:{ideal:t},echoCancellation:{ideal:!0},noiseSuppression:{ideal:!0}}});const r=e.createMediaStreamSource(n),l=new AudioWorkletNode(e,\"raw-audio-processor\");return r.connect(i),i.connect(l),new a(e,i,l,n)}catch(t){var s,i;throw null==(s=n)||s.getTracks().forEach(t=>t.stop()),null==(i=e)||i.close(),t}}constructor(t,e,n,s){this.context=void 0,this.analyser=void 0,this.worklet=void 0,this.inputStream=void 0,this.context=t,this.analyser=e,this.worklet=n,this.inputStream=s}async close(){this.inputStream.getTracks().forEach(t=>t.stop()),await this.context.close()}}const i=new Blob(['\\n      class AudioConcatProcessor extends AudioWorkletProcessor {\\n        constructor() {\\n          super();\\n          this.buffers = []; // Initialize an empty buffer\\n          this.cursor = 0;\\n          this.currentBuffer = null;\\n          this.wasInterrupted = false;\\n          this.finished = false;\\n\\n          this.port.onmessage = ({ data }) => {\\n            switch (data.type) {\\n              case \"buffer\":\\n                this.wasInterrupted = false;\\n                this.buffers.push(new Int16Array(data.buffer));\\n                break;\\n              case \"interrupt\":\\n                this.wasInterrupted = true;\\n                break;\\n              case \"clearInterrupted\":\\n                if (this.wasInterrupted) {\\n                  this.wasInterrupted = false;\\n                  this.buffers = [];\\n                  this.currentBuffer = null;\\n                }\\n            }\\n          };\\n        }\\n        process(_, outputs) {\\n          let finished = false;\\n          const output = outputs[0][0];\\n          for (let i = 0; i < output.length; i++) {\\n            if (!this.currentBuffer) {\\n              if (this.buffers.length === 0) {\\n                finished = true;\\n                break;\\n              }\\n              this.currentBuffer = this.buffers.shift();\\n              this.cursor = 0;\\n            }\\n\\n            output[i] = this.currentBuffer[this.cursor] / 32768;\\n            this.cursor++;\\n\\n            if (this.cursor >= this.currentBuffer.length) {\\n              this.currentBuffer = null;\\n            }\\n          }\\n\\n          if (this.finished !== finished) {\\n            this.finished = finished;\\n            this.port.postMessage({ type: \"process\", finished });\\n          }\\n\\n          return true; // Continue processing\\n        }\\n      }\\n\\n      registerProcessor(\"audio-concat-processor\", AudioConcatProcessor);\\n    '],{type:\"application/javascript\"}),r=URL.createObjectURL(i);class l{static async create(t){let e=null;try{e=new AudioContext({sampleRate:t});const n=e.createAnalyser(),s=e.createGain();s.connect(n),n.connect(e.destination),await e.audioWorklet.addModule(r);const o=new AudioWorkletNode(e,\"audio-concat-processor\");return o.connect(s),new l(e,n,s,o)}catch(t){var n;throw null==(n=e)||n.close(),t}}constructor(t,e,n,s){this.context=void 0,this.analyser=void 0,this.gain=void 0,this.worklet=void 0,this.context=t,this.analyser=e,this.gain=n,this.worklet=s}async close(){await this.context.close()}}function c(t){return!!t.type}class u{static async create(t){let e=null;try{var n;const s=null!=(n=t.origin)?n:\"wss://api.elevenlabs.io\",o=t.signedUrl?t.signedUrl:s+\"/v1/convai/conversation?agent_id=\"+t.agentId,a=[\"convai\"];t.authorization&&a.push(`bearer.${t.authorization}`),e=new WebSocket(o,a);const i=await new Promise((n,s)=>{e.addEventListener(\"open\",()=>{var n;const s={type:\"conversation_initiation_client_data\"};var o,a,i,r;t.overrides&&(s.conversation_config_override={agent:{prompt:null==(o=t.overrides.agent)?void 0:o.prompt,first_message:null==(a=t.overrides.agent)?void 0:a.firstMessage,language:null==(i=t.overrides.agent)?void 0:i.language},tts:{voice_id:null==(r=t.overrides.tts)?void 0:r.voiceId}}),t.customLlmExtraBody&&(s.custom_llm_extra_body=t.customLlmExtraBody),null==(n=e)||n.send(JSON.stringify(s))},{once:!0}),e.addEventListener(\"error\",s),e.addEventListener(\"close\",s),e.addEventListener(\"message\",t=>{const e=JSON.parse(t.data);c(e)&&(\"conversation_initiation_metadata\"===e.type?n(e.conversation_initiation_metadata_event):console.warn(\"First received message is not conversation metadata.\"))},{once:!0})}),r=i.conversation_id,l=parseInt(i.agent_output_audio_format.replace(\"pcm_\",\"\"));return new u(e,r,l)}catch(t){var s;throw null==(s=e)||s.close(),t}}constructor(t,e,n){this.socket=void 0,this.conversationId=void 0,this.sampleRate=void 0,this.socket=t,this.conversationId=e,this.sampleRate=n}close(){this.socket.close()}sendMessage(t){this.socket.send(JSON.stringify(t))}}const h={clientTools:{}},d={onConnect:()=>{},onDebug:()=>{},onDisconnect:()=>{},onError:()=>{},onMessage:()=>{},onModeChange:()=>{},onStatusChange:()=>{}};class p{static async startSession(e){const n=t({},h,d,e);n.onStatusChange({status:\"connecting\"});let s=null,o=null,i=null;try{return s=await a.create(16e3),o=await u.create(e),i=await l.create(o.sampleRate),new p(n,o,s,i)}catch(t){var r,c,f;throw n.onStatusChange({status:\"disconnected\"}),null==(r=o)||r.close(),await(null==(c=s)?void 0:c.close()),await(null==(f=i)?void 0:f.close()),t}}constructor(t,s,o,a){var i=this;this.options=void 0,this.connection=void 0,this.input=void 0,this.output=void 0,this.lastInterruptTimestamp=0,this.mode=\"listening\",this.status=\"connecting\",this.inputFrequencyData=void 0,this.outputFrequencyData=void 0,this.volume=1,this.endSession=async function(){\"connected\"===i.status&&(i.updateStatus(\"disconnecting\"),i.connection.close(),await i.input.close(),await i.output.close(),i.updateStatus(\"disconnected\"))},this.updateMode=t=>{t!==this.mode&&(this.mode=t,this.options.onModeChange({mode:t}))},this.updateStatus=t=>{t!==this.status&&(this.status=t,this.options.onStatusChange({status:t}))},this.onEvent=async function(t){try{const n=JSON.parse(t.data);if(!c(n))return;switch(n.type){case\"interruption\":n.interruption_event&&(i.lastInterruptTimestamp=n.interruption_event.event_id),i.fadeOutAudio();break;case\"agent_response\":i.options.onMessage({source:\"ai\",message:n.agent_response_event.agent_response});break;case\"user_transcript\":i.options.onMessage({source:\"user\",message:n.user_transcription_event.user_transcript});break;case\"internal_tentative_agent_response\":i.options.onDebug({type:\"tentative_agent_response\",response:n.tentative_agent_response_internal_event.tentative_agent_response});break;case\"client_tool_call\":if(i.options.clientTools.hasOwnProperty(n.client_tool_call.tool_name)){try{var e;const t=null!=(e=await i.options.clientTools[n.client_tool_call.tool_name](n.client_tool_call.parameters))?e:\"Client tool execution successful.\";i.connection.sendMessage({type:\"client_tool_result\",tool_call_id:n.client_tool_call.tool_call_id,result:t,is_error:!1})}catch(t){i.onError(\"Client tool execution failed with following error: \"+(null==t?void 0:t.message),{clientToolName:n.client_tool_call.tool_name}),i.connection.sendMessage({type:\"client_tool_result\",tool_call_id:n.client_tool_call.tool_call_id,result:\"Client tool execution failed: \"+(null==t?void 0:t.message),is_error:!0})}break}if(i.options.onUnhandledClientToolCall){i.options.onUnhandledClientToolCall(n.client_tool_call);break}i.onError(`Client tool with name ${n.client_tool_call.tool_name} is not defined on client`,{clientToolName:n.client_tool_call.tool_name}),i.connection.sendMessage({type:\"client_tool_result\",tool_call_id:n.client_tool_call.tool_call_id,result:`Client tool with name ${n.client_tool_call.tool_name} is not defined on client`,is_error:!0});break;case\"audio\":i.lastInterruptTimestamp<=n.audio_event.event_id&&(i.addAudioBase64Chunk(n.audio_event.audio_base_64),i.updateMode(\"speaking\"));break;case\"ping\":i.connection.sendMessage({type:\"pong\",event_id:n.ping_event.event_id});break;default:i.options.onDebug(n)}}catch(e){return void i.onError(\"Failed to parse event data\",{event:t})}},this.onInputWorkletMessage=t=>{\"connected\"===this.status&&this.connection.sendMessage({user_audio_chunk:e(t.data[0].buffer)})},this.onOutputWorkletMessage=({data:t})=>{\"process\"===t.type&&this.updateMode(t.finished?\"listening\":\"speaking\")},this.addAudioBase64Chunk=async function(t){i.output.gain.gain.value=i.volume,i.output.worklet.port.postMessage({type:\"clearInterrupted\"}),i.output.worklet.port.postMessage({type:\"buffer\",buffer:n(t)})},this.fadeOutAudio=async function(){i.updateMode(\"listening\"),i.output.worklet.port.postMessage({type:\"interrupt\"}),i.output.gain.gain.exponentialRampToValueAtTime(1e-4,i.output.context.currentTime+2),setTimeout(()=>{i.output.gain.gain.value=i.volume,i.output.worklet.port.postMessage({type:\"clearInterrupted\"})},2e3)},this.onError=(t,e)=>{console.error(t,e),this.options.onError(t,e)},this.calculateVolume=t=>{if(0===t.length)return 0;let e=0;for(let n=0;n<t.length;n++)e+=t[n]/255;return e/=t.length,e<0?0:e>1?1:e},this.getId=()=>this.connection.conversationId,this.setVolume=({volume:t})=>{this.volume=t},this.getInputByteFrequencyData=()=>(null!=this.inputFrequencyData||(this.inputFrequencyData=new Uint8Array(this.input.analyser.frequencyBinCount)),this.input.analyser.getByteFrequencyData(this.inputFrequencyData),this.inputFrequencyData),this.getOutputByteFrequencyData=()=>(null!=this.outputFrequencyData||(this.outputFrequencyData=new Uint8Array(this.output.analyser.frequencyBinCount)),this.output.analyser.getByteFrequencyData(this.outputFrequencyData),this.outputFrequencyData),this.getInputVolume=()=>this.calculateVolume(this.getInputByteFrequencyData()),this.getOutputVolume=()=>this.calculateVolume(this.getOutputByteFrequencyData()),this.options=t,this.connection=s,this.input=o,this.output=a,this.options.onConnect({conversationId:s.conversationId}),this.connection.socket.addEventListener(\"message\",t=>{this.onEvent(t)}),this.connection.socket.addEventListener(\"error\",t=>{this.updateStatus(\"disconnected\"),this.onError(\"Socket error\",t)}),this.connection.socket.addEventListener(\"close\",()=>{this.updateStatus(\"disconnected\"),this.options.onDisconnect()}),this.input.worklet.port.onmessage=this.onInputWorkletMessage,this.output.worklet.port.onmessage=this.onOutputWorkletMessage,this.updateStatus(\"connected\")}}\n//# sourceMappingURL=lib.modern.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@11labs+client@0.0.4/node_modules/@11labs/client/dist/lib.modern.js\n");

/***/ })

};
;